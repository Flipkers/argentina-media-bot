require('dotenv').config();
require('./polyfills');

const SimpleMercury = require('./simple_mercury');
const axios = require('axios');

console.log('üß™ –¢–ï–°–¢–û–í–ê–Ø –í–ï–†–°–ò–Ø CLI');
console.log('Node.js –≤–µ—Ä—Å–∏—è:', process.version);

async function testNewsAPI() {
  try {
    console.log('\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º News API...');
    
    const apiKey = process.env.NEWSDATA_API_KEY;
    if (!apiKey) {
      console.log('‚ùå NEWSDATA_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const url = `https://newsdata.io/api/1/news?apikey=${apiKey}&country=ar&language=es&size=2`;
    const response = await axios.get(url);
    
    console.log('‚úÖ News API —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç–∞—Ç–µ–π:', response.data.results?.length || 0);
    
    if (response.data.results && response.data.results.length > 0) {
      const article = response.data.results[0];
      console.log('üì∞ –ü–µ—Ä–≤–∞—è —Å—Ç–∞—Ç—å—è:', article.title);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
      console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥...');
      const parsed = await SimpleMercury.parse(article.link);
      console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫:', parsed.title);
      console.log('üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):', parsed.content.substring(0, 100));
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

async function testSupabase() {
  try {
    console.log('\nüíæ –¢–µ—Å—Ç–∏—Ä—É–µ–º Supabase...');
    
    const { createClient } = require('@supabase/supabase-js');
    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_SERVICE_KEY;
    
    if (!supabaseUrl || !supabaseKey) {
      console.log('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    const supabase = createClient(supabaseUrl, supabaseKey);
    const { data, error } = await supabase.from('articles').select('count').limit(1);
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ Supabase:', error.message);
    } else {
      console.log('‚úÖ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Supabase:', error.message);
  }
}

async function testOpenAI() {
  try {
    console.log('\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI...');
    
    const OpenAI = require('openai');
    const apiKey = process.env.OPENAI_API_KEY;
    
    if (!apiKey) {
      console.log('‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const openai = new OpenAI({ apiKey });
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç.' }],
      max_tokens: 10
    });
    
    console.log('‚úÖ OpenAI —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('ü§ñ –û—Ç–≤–µ—Ç:', response.choices[0].message.content);
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI:', error.message);
  }
}

async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã...\n');
  
  await testNewsAPI();
  await testSupabase();
  await testOpenAI();
  
  console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
}

runAllTests().catch(console.error); 