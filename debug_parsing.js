require('dotenv').config();

const { createClient } = require('@supabase/supabase-js');
const SimpleMercury = require('./simple_mercury');

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugParsingIssues() {
  console.log('\nüìä –ê–ù–ê–õ–ò–ó –°–¢–ê–¢–ï–ô –í –ë–ê–ó–ï:');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ —Å –ø—É—Å—Ç—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    const { data: emptyContentArticles, error } = await supabase
      .from('articles')
      .select('*')
      .or('mercury_content.is.null,mercury_content.eq.')
      .limit(5);
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π:', error.message);
      return;
    }
    
    console.log(`üì∞ –ù–∞–π–¥–µ–Ω–æ ${emptyContentArticles.length} —Å—Ç–∞—Ç–µ–π —Å –ø—É—Å—Ç—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º`);
    
    if (emptyContentArticles.length === 0) {
      console.log('‚úÖ –í—Å–µ —Å—Ç–∞—Ç—å–∏ –∏–º–µ—é—Ç –∫–æ–Ω—Ç–µ–Ω—Ç');
      return;
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç–∞—Ç—å—é
    for (let i = 0; i < emptyContentArticles.length; i++) {
      const article = emptyContentArticles[i];
      console.log(`\nüìù [${i + 1}/${emptyContentArticles.length}] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: "${article.title}"`);
      console.log('üîó –°—Å—ã–ª–∫–∞:', article.link);
      console.log('üìÑ Mercury –∫–æ–Ω—Ç–µ–Ω—Ç:', article.mercury_content ? `"${article.mercury_content.substring(0, 100)}..."` : 'NULL');
      console.log('üìÑ –î–ª–∏–Ω–∞ mercury –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', article.mercury_content ? article.mercury_content.length : 0);
      
      // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–∞—Ä—Å–∏—Ç—å —Å—Ç–∞—Ç—å—é
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–∞—Ä—Å–∏—Ç—å...');
      try {
        const parsed = await SimpleMercury.parse(article.link);
        console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!');
        console.log('üìù –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:', parsed.title);
        console.log('üìÑ –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:', parsed.content ? `"${parsed.content.substring(0, 100)}..."` : 'NULL');
        console.log('üìÑ –î–ª–∏–Ω–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', parsed.content ? parsed.content.length : 0);
        
                  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –≤ –±–∞–∑–µ (—Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è)
          if (parsed.content && parsed.content.length > 50) {
            console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –≤ –±–∞–∑–µ...');
            const updateData = {
              mercury_content: parsed.content,
              title: parsed.title
            };
            
            console.log('üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateData);
            
            const { error: updateError } = await supabase
              .from('articles')
              .update(updateData)
              .eq('id', article.id);
          
          if (updateError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateError.message);
          } else {
            console.log('‚úÖ –°—Ç–∞—Ç—å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
          }
        } else {
          console.log('‚ö†Ô∏è –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–∂–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
        }
        
      } catch (parseError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', parseError.message);
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
    
  } catch (error) {
    console.log('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

async function checkContentStatistics() {
  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–¢–ï–ù–¢–ê:');
  
  try {
    const { count: totalArticles } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true });
    
    const { count: articlesWithContent } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true })
      .not('mercury_content', 'is', null)
      .not('mercury_content', 'eq', '');
    
    const { count: articlesWithLongContent } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true })
      .not('mercury_content', 'is', null)
      .not('mercury_content', 'eq', '')
      .gte('mercury_content.length', 100);
    
    console.log(`üì∞ –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: ${totalArticles}`);
    console.log(`üìÑ –° –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: ${articlesWithContent}`);
    console.log(`üìÑ –° –¥–ª–∏–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (100+ —Å–∏–º–≤–æ–ª–æ–≤): ${articlesWithLongContent}`);
    console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: ${Math.round((articlesWithContent / totalArticles) * 100)}%`);
    console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å –¥–ª–∏–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: ${Math.round((articlesWithLongContent / totalArticles) * 100)}%`);
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
  }
}

async function testSpecificSites() {
  console.log('\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú –ö–û–ù–ö–†–ï–¢–ù–´–ï –°–ê–ô–¢–´:');
  
  const testUrls = [
    'https://www.infobae.com/cultura/2025/08/02/una-propagandista-declarada-nuevo-documental-sobre-leni-riefenstahl-examina-su-rol-durante-el-nazismo/',
    'https://www.clarin.com/politica/2025/08/02/los-gobernadores-pasan-a-la-accion-y-quieren-diputados-y-senadores-propios/',
    'https://www.lanacion.com.ar/politica/2025/08/02/el-desopilante-exabrupto-de-luck-ra-que-descoloco-al-jurado-de-la-voz-argentina-a-ver-como-traducen-eso/'
  ];
  
  for (let i = 0; i < testUrls.length; i++) {
    const url = testUrls[i];
    console.log(`\nüîç [${i + 1}/${testUrls.length}] –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${url}`);
    
    try {
      const parsed = await SimpleMercury.parse(url);
      console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!');
      console.log('üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫:', parsed.title);
      console.log('üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç:', parsed.content ? `"${parsed.content.substring(0, 200)}..."` : 'NULL');
      console.log('üìÑ –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', parsed.content ? parsed.content.length : 0);
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
}

async function runDebug() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞...\n');
  
  await checkContentStatistics();
  await testSpecificSites();
  await debugParsingIssues();
  
  console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

runDebug().catch(console.error); 