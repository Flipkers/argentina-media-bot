require('dotenv').config();
require('./polyfills');

const { createClient } = require('@supabase/supabase-js');
const OpenAI = require('openai');
const { getOpenAIPrompt } = require('./openai_prompt');

console.log('üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ë–õ–ê–ö–ê');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY;
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugCloudIssues() {
  console.log('\nüìä –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –í –û–ë–õ–ê–ö–ï:');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –±–µ–∑ OpenAI –∞–Ω–∞–ª–∏–∑–∞
    const { data: unprocessedArticles, error } = await supabase
      .from('articles')
      .select('*')
      .is('openai_score', null)
      .limit(10);
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π:', error.message);
      return;
    }
    
    console.log(`üì∞ –ù–∞–π–¥–µ–Ω–æ ${unprocessedArticles.length} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç–∞—Ç—å—é –¥–µ—Ç–∞–ª—å–Ω–æ
    for (let i = 0; i < Math.min(3, unprocessedArticles.length); i++) {
      const article = unprocessedArticles[i];
      console.log(`\nüîç –°–¢–ê–¢–¨–Ø ${i + 1}: "${article.title}"`);
      console.log('üìÑ ID:', article.id);
      console.log('üìÑ Link:', article.link);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
      const content = article.mercury_content || article.description || article.content || '–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
      console.log('üìÑ Mercury Content:', article.mercury_content ? `"${article.mercury_content.substring(0, 100)}..."` : 'NULL');
      console.log('üìÑ Mercury Content –¥–ª–∏–Ω–∞:', article.mercury_content ? article.mercury_content.length : 0);
      console.log('üìÑ Description:', article.description ? `"${article.description.substring(0, 100)}..."` : 'NULL');
      console.log('üìÑ Description –¥–ª–∏–Ω–∞:', article.description ? article.description.length : 0);
      console.log('üìÑ Content:', article.content ? `"${article.content.substring(0, 100)}..."` : 'NULL');
      console.log('üìÑ Content –¥–ª–∏–Ω–∞:', article.content ? article.content.length : 0);
      console.log('üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª–∏–Ω–∞:', content.length);
      
      if (content.length < 50) {
        console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
        continue;
      }
      
      // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ OpenAI
      console.log('ü§ñ –ü—Ä–æ–±—É–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI...');
      try {
        const prompt = getOpenAIPrompt(article.title, content, article.link);
        console.log('üìÑ –ü—Ä–æ–º–ø—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞:', prompt.length);
        
        const response = await openai.chat.completions.create({
          model: 'gpt-4o-mini',
          messages: [{ role: 'user', content: prompt }],
          max_tokens: 2000,
          temperature: 0.7
        });
        
        const result = response.choices[0].message.content;
        console.log('‚úÖ OpenAI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
        console.log('üìÑ –û—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):', result.substring(0, 200));
        
        // –ü–∞—Ä—Å–∏–º JSON
        try {
          const analysis = JSON.parse(result);
          console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω');
          console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', analysis);
          
          // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É
          console.log('üíæ –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É...');
          const { error: updateError } = await supabase
            .from('articles')
            .update({
              openai_category: { category: analysis.category },
              openai_score: analysis.score,
              openai_should_post: analysis.should_post,
              openai_post_title: { title: analysis.post_title },
              openai_post_content: { content: analysis.post_content },
              openai_translation: { translation: analysis.translation }
            })
            .eq('id', article.id);
          
          if (updateError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã:', updateError.message);
          } else {
            console.log('‚úÖ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
          }
          
        } catch (parseError) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError.message);
          console.log('üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', result);
        }
        
      } catch (openaiError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ OpenAI:', openaiError.message);
        if (openaiError.response) {
          console.log('üìä –°—Ç–∞—Ç—É—Å:', openaiError.response.status);
          console.log('üìÑ –î–∞–Ω–Ω—ã–µ:', openaiError.response.data);
        }
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
  } catch (error) {
    console.log('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

async function checkEnvironment() {
  console.log('\nüîß –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø:');
  console.log('üìä Node.js –≤–µ—Ä—Å–∏—è:', process.version);
  console.log('üìä –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', process.platform);
  console.log('üìä –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:', process.arch);
  console.log('üìä –ü–∞–º—è—Ç—å:', Math.round(process.memoryUsage().heapUsed / 1024 / 1024), 'MB');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log('\nüìã –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:');
  const vars = ['SUPABASE_URL', 'OPENAI_API_KEY', 'TELEGRAM_BOT_TOKEN'];
  vars.forEach(varName => {
    const value = process.env[varName];
    console.log(`${varName}: ${value ? '‚úÖ –ù–∞–π–¥–µ–Ω–∞' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
  });
}

async function runDebug() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –æ–±–ª–∞–∫–∞...\n');
  
  await checkEnvironment();
  await debugCloudIssues();
  
  console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

runDebug().catch(console.error); 