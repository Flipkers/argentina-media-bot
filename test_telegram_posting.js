require('dotenv').config();

const { createClient } = require('@supabase/supabase-js');
const TelegramBot = require('./telegram_bot');

console.log('üß™ –¢–ï–°–¢–ò–†–£–ï–ú TELEGRAM –ü–û–°–¢–ò–ù–ì');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testTelegramConnection() {
  console.log('\nüì± –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø TELEGRAM:');
  
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;
  const channelId = process.env.TELEGRAM_CHANNEL_ID;
  
  console.log('üîë TELEGRAM_BOT_TOKEN:', botToken ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω');
  console.log('üí¨ TELEGRAM_CHAT_ID:', chatId ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω');
  console.log('üì¢ TELEGRAM_CHANNEL_ID:', channelId ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω');
  
  if (!botToken) {
    console.log('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return false;
  }
  
  if (!chatId && !channelId) {
    console.log('‚ùå TELEGRAM_CHAT_ID –∏–ª–∏ TELEGRAM_CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    return false;
  }
  
  try {
    const telegramBot = new TelegramBot();
    const isConnected = await telegramBot.testConnection();
    
    if (isConnected) {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ');
      return true;
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:', error.message);
    return false;
  }
}

async function testTelegramPosting() {
  console.log('\nüì§ –¢–ï–°–¢ –ü–û–°–¢–ò–ù–ì–ê –í TELEGRAM:');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏, –≥–æ—Ç–æ–≤—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...');
    const { data: articles, error } = await supabase
      .from('articles')
      .select('*')
      .eq('openai_should_post', true)
      .gte('openai_score', 6)
      .is('telegram_published_at', null)
      .limit(3);
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π:', error.message);
      return;
    }
    
    console.log(`üì∞ –ù–∞–π–¥–µ–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`);
    
    if (articles.length === 0) {
      console.log('‚úÖ –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
      return;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–µ—Ä–≤–æ–π —Å—Ç–∞—Ç—å–∏
    const article = articles[0];
    console.log(`\nüìù –ü—É–±–ª–∏–∫—É–µ–º —Å—Ç–∞—Ç—å—é: "${article.title}"`);
    console.log('üìä –û—Ü–µ–Ω–∫–∞:', article.openai_score);
    console.log('üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞:', article.openai_post_title);
    
    const telegramBot = new TelegramBot();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ Telegram...');
    const success = await telegramBot.sendPost(article);
    
    if (success) {
      console.log('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
      console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...');
      const { error: updateError } = await supabase
        .from('articles')
        .update({ telegram_published_at: new Date().toISOString() })
        .eq('id', article.id);
      
      if (updateError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', updateError.message);
      } else {
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω');
      }
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ Telegram');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∏–Ω–≥–∞:', error.message);
  }
}

async function checkPublishingStatus() {
  console.log('\nüìä –°–¢–ê–¢–£–° –ü–£–ë–õ–ò–ö–ê–¶–ò–ò:');
  
  try {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º
    const { count: totalArticles } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true });
    
    const { count: readyToPublish } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true })
      .eq('openai_should_post', true)
      .gte('openai_score', 6);
    
    const { count: publishedArticles } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true })
      .not('telegram_published_at', 'is', null);
    
    const { count: pendingPublish } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true })
      .eq('openai_should_post', true)
      .gte('openai_score', 6)
      .is('telegram_published_at', null);
    
    console.log(`üì∞ –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: ${totalArticles}`);
    console.log(`‚≠ê –ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${readyToPublish}`);
    console.log(`üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${publishedArticles}`);
    console.log(`‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${pendingPublish}`);
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
  }
}

async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã Telegram –ø–æ—Å—Ç–∏–Ω–≥–∞...\n');
  
  await checkPublishingStatus();
  
  const isConnected = await testTelegramConnection();
  if (isConnected) {
    await testTelegramPosting();
  }
  
  console.log('\n‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
}

runTests().catch(console.error); 