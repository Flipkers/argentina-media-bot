require('dotenv').config();

const { createClient } = require('@supabase/supabase-js');
const OpenAI = require('openai');
const { getOpenAIPrompt } = require('./openai_prompt');

console.log('üß™ –¢–ï–°–¢–ò–†–£–ï–ú OPENAI –ê–ù–ê–õ–ò–ó');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY;
const openaiApiKey = process.env.OPENAI_API_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  process.exit(1);
}

if (!openaiApiKey) {
  console.error('‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);
const openai = new OpenAI({ apiKey: openaiApiKey });

async function testOpenAIAnalysis() {
  console.log('\nü§ñ –¢–ï–°–¢ OPENAI –ê–ù–ê–õ–ò–ó–ê:');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –±–µ–∑ OpenAI –∞–Ω–∞–ª–∏–∑–∞
    console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –±–µ–∑ OpenAI –∞–Ω–∞–ª–∏–∑–∞...');
    const { data: articles, error } = await supabase
      .from('articles')
      .select('*')
      .is('openai_score', null)
      .limit(3);
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π:', error.message);
      return;
    }
    
    console.log(`üì∞ –ù–∞–π–¥–µ–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞`);
    
    if (articles.length === 0) {
      console.log('‚úÖ –í—Å–µ —Å—Ç–∞—Ç—å–∏ —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      return;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç–∞—Ç—å–∏
    const article = articles[0];
    console.log(`\nüìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é: "${article.title}"`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if (!article.content || article.content.trim().length < 50) {
      console.log('‚ö†Ô∏è –°—Ç–∞—Ç—å—è –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
    const prompt = getOpenAIPrompt(article.title, article.content, article.link);
    console.log('üìÑ –ü—Ä–æ–º–ø—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞:', prompt.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
    console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI...');
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 2000,
      temperature: 0.7
    });
    
    const result = response.choices[0].message.content;
    console.log('‚úÖ OpenAI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
    console.log('üìÑ –û—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):', result.substring(0, 200));
    
    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
    try {
      const analysis = JSON.parse(result);
      console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω');
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:');
      console.log('  - –ö–∞—Ç–µ–≥–æ—Ä–∏—è:', analysis.category);
      console.log('  - –û—Ü–µ–Ω–∫–∞:', analysis.score);
      console.log('  - –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å:', analysis.should_post);
      console.log('  - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞:', analysis.post_title?.substring(0, 50));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –≤ –±–∞–∑–µ
      console.log('\nüíæ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      const { error: updateError } = await supabase
        .from('articles')
        .update({
          openai_category: analysis.category,
          openai_score: analysis.score,
          openai_should_post: analysis.should_post,
          openai_post_title: analysis.post_title,
          openai_post_content: analysis.post_content,
          openai_translation: analysis.translation,
          openai_analyzed_at: new Date().toISOString()
        })
        .eq('id', article.id);
      
      if (updateError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', updateError.message);
      } else {
        console.log('‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –±–∞–∑–µ');
      }
      
    } catch (parseError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError.message);
      console.log('üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç OpenAI:', result);
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI –∞–Ω–∞–ª–∏–∑–∞:', error.message);
    if (error.response) {
      console.log('üìä –°—Ç–∞—Ç—É—Å:', error.response.status);
      console.log('üìÑ –î–∞–Ω–Ω—ã–µ:', error.response.data);
    }
  }
}

async function checkDatabaseStatus() {
  console.log('\nüìä –°–¢–ê–¢–£–° –ë–ê–ó–´ –î–ê–ù–ù–´–•:');
  
  try {
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const { count: totalArticles } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true });
    
    const { count: analyzedArticles } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true })
      .not('openai_score', 'is', null);
    
    const { count: interestingArticles } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true })
      .gte('openai_score', 6);
    
    console.log(`üì∞ –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: ${totalArticles}`);
    console.log(`ü§ñ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ OpenAI: ${analyzedArticles}`);
    console.log(`‚≠ê –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π (–æ—Ü–µ–Ω–∫–∞ 6+): ${interestingArticles}`);
    console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${Math.round((analyzedArticles / totalArticles) * 100)}%`);
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
  }
}

async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã OpenAI –∞–Ω–∞–ª–∏–∑–∞...\n');
  
  await checkDatabaseStatus();
  await testOpenAIAnalysis();
  
  console.log('\n‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
}

runTests().catch(console.error); 