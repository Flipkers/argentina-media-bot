require('dotenv').config();

const { createClient } = require('@supabase/supabase-js');

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–ù–¢–ï–ù–¢–ê –°–¢–ê–¢–ï–ô');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugContent() {
  console.log('\nüìä –ü–†–û–í–ï–†–Ø–ï–ú –ö–û–ù–¢–ï–ù–¢ –°–¢–ê–¢–ï–ô:');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –±–µ–∑ OpenAI –∞–Ω–∞–ª–∏–∑–∞
    const { data: articles, error } = await supabase
      .from('articles')
      .select('*')
      .is('openai_score', null)
      .limit(5);
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π:', error.message);
      return;
    }
    
    console.log(`üì∞ –ù–∞–π–¥–µ–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞`);
    
    articles.forEach((article, index) => {
      console.log(`\nüìù –°—Ç–∞—Ç—å—è ${index + 1}: "${article.title}"`);
      console.log('üìÑ Content:', article.content ? `"${article.content.substring(0, 100)}..."` : 'NULL');
      console.log('üìÑ Content –¥–ª–∏–Ω–∞:', article.content ? article.content.length : 0);
      console.log('üìÑ Mercury Content:', article.mercury_content ? `"${article.mercury_content.substring(0, 100)}..."` : 'NULL');
      console.log('üìÑ Mercury Content –¥–ª–∏–Ω–∞:', article.mercury_content ? article.mercury_content.length : 0);
      console.log('üìÑ Description:', article.description ? `"${article.description.substring(0, 100)}..."` : 'NULL');
      console.log('üìÑ Description –¥–ª–∏–Ω–∞:', article.description ? article.description.length : 0);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
      const content = article.mercury_content || article.description || '–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
      console.log('üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:', content.length > 50 ? '‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ' : '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ');
      console.log('üìÑ –î–ª–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', content.length);
    });
    
  } catch (error) {
    console.log('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

async function checkContentStatistics() {
  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–¢–ï–ù–¢–ê:');
  
  try {
    const { count: totalArticles } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true });
    
    const { count: withContent } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true })
      .not('content', 'is', null)
      .not('content', 'eq', '');
    
    const { count: withMercuryContent } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true })
      .not('mercury_content', 'is', null)
      .not('mercury_content', 'eq', '');
    
    const { count: withLongMercuryContent } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true })
      .not('mercury_content', 'is', null)
      .not('mercury_content', 'eq', '')
      .gte('mercury_content.length', 100);
    
    const { count: withoutOpenAI } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true })
      .is('openai_score', null);
    
    const { count: withoutOpenAIButWithContent } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true })
      .is('openai_score', null)
      .not('mercury_content', 'is', null)
      .not('mercury_content', 'eq', '')
      .gte('mercury_content.length', 50);
    
    console.log(`üì∞ –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: ${totalArticles}`);
    console.log(`üìÑ –° –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: ${withContent}`);
    console.log(`üìÑ –° mercury –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: ${withMercuryContent}`);
    console.log(`üìÑ –° –¥–ª–∏–Ω–Ω—ã–º mercury –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (100+): ${withLongMercuryContent}`);
    console.log(`ü§ñ –ë–µ–∑ OpenAI –∞–Ω–∞–ª–∏–∑–∞: ${withoutOpenAI}`);
    console.log(`ü§ñ –ë–µ–∑ OpenAI, –Ω–æ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (50+): ${withoutOpenAIButWithContent}`);
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
  }
}

async function runDebug() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞...\n');
  
  await checkContentStatistics();
  await debugContent();
  
  console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

runDebug().catch(console.error); 