require('dotenv').config();

const { createClient } = require('@supabase/supabase-js');
const OpenAI = require('openai');
const { getOpenAIPrompt } = require('./openai_prompt');

console.log('üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú OPENAI –ê–ù–ê–õ–ò–ó');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY;
const openaiApiKey = process.env.OPENAI_API_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  process.exit(1);
}

if (!openaiApiKey) {
  console.error('‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);
const openai = new OpenAI({ apiKey: openaiApiKey });

async function analyzeUnprocessedArticles() {
  console.log('\nü§ñ –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –°–¢–ê–¢–¨–ò:');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –±–µ–∑ OpenAI –∞–Ω–∞–ª–∏–∑–∞
    console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –±–µ–∑ OpenAI –∞–Ω–∞–ª–∏–∑–∞...');
    const { data: articles, error } = await supabase
      .from('articles')
      .select('*')
      .is('openai_score', null)
      .not('mercury_content', 'is', null)
      .not('mercury_content', 'eq', '')
      .limit(10);
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π:', error.message);
      return;
    }
    
    console.log(`üì∞ –ù–∞–π–¥–µ–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
    
    if (articles.length === 0) {
      console.log('‚úÖ –í—Å–µ —Å—Ç–∞—Ç—å–∏ —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      return;
    }
    
    let successCount = 0;
    let errorCount = 0;
    
    for (let i = 0; i < articles.length; i++) {
      const article = articles[i];
      console.log(`\nüìù [${i + 1}/${articles.length}] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: "${article.title}"`);
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        console.log('üìÑ –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç:', article.mercury_content ? `"${article.mercury_content.substring(0, 100)}..."` : 'NULL');
        console.log('üìÑ –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', article.mercury_content ? article.mercury_content.length : 0);
        
        if (!article.mercury_content || article.mercury_content.trim().length < 50) {
          console.log('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
          continue;
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        const prompt = getOpenAIPrompt(article.title, article.mercury_content, article.link);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
        console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI...');
        const response = await openai.chat.completions.create({
          model: 'gpt-4o-mini',
          messages: [{ role: 'user', content: prompt }],
          max_tokens: 2000,
          temperature: 0.7
        });
        
        const result = response.choices[0].message.content;
        console.log('‚úÖ OpenAI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
        
        // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
        try {
          const analysis = JSON.parse(result);
          console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω');
          console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –∫–∞—Ç–µ–≥–æ—Ä–∏—è =', analysis.category, ', –æ—Ü–µ–Ω–∫–∞ =', analysis.score);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –≤ –±–∞–∑–µ (—Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è)
          const updateData = {
            openai_category: analysis.category,
            openai_score: analysis.score,
            openai_should_post: analysis.should_post,
            openai_post_title: analysis.post_title,
            openai_post_content: analysis.post_content,
            openai_translation: analysis.translation
          };
          
          console.log('üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateData);
          
          const { error: updateError } = await supabase
            .from('articles')
            .update(updateData)
            .eq('id', article.id);
          
          if (updateError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', updateError.message);
            errorCount++;
          } else {
            console.log('‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            successCount++;
          }
          
        } catch (parseError) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError.message);
          console.log('üìÑ –û—Ç–≤–µ—Ç OpenAI:', result.substring(0, 200));
          errorCount++;
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
        
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç—å–∏:', error.message);
        errorCount++;
      }
    }
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
  } catch (error) {
    console.log('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

async function checkDatabaseStatus() {
  console.log('\nüìä –°–¢–ê–¢–£–° –ë–ê–ó–´ –î–ê–ù–ù–´–•:');
  
  try {
    const { count: totalArticles } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true });
    
    const { count: analyzedArticles } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true })
      .not('openai_score', 'is', null);
    
    const { count: interestingArticles } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true })
      .gte('openai_score', 6);
    
    const { count: readyToPublish } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true })
      .eq('openai_should_post', true)
      .gte('openai_score', 6);
    
    console.log(`üì∞ –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: ${totalArticles}`);
    console.log(`ü§ñ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ OpenAI: ${analyzedArticles}`);
    console.log(`‚≠ê –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π (–æ—Ü–µ–Ω–∫–∞ 6+): ${interestingArticles}`);
    console.log(`üì§ –ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${readyToPublish}`);
    console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${Math.round((analyzedArticles / totalArticles) * 100)}%`);
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
  }
}

async function runFix() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ OpenAI –∞–Ω–∞–ª–∏–∑–∞...\n');
  
  await checkDatabaseStatus();
  await analyzeUnprocessedArticles();
  await checkDatabaseStatus();
  
  console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

runFix().catch(console.error); 