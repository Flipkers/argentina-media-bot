require('dotenv').config();

const OpenAI = require('openai');
const TelegramBot = require('./telegram_bot');

console.log('üß™ –¢–ï–°–¢–ò–†–£–ï–ú –°–ï–†–í–ò–°–´');

async function testOpenAI() {
  console.log('\nü§ñ –¢–ï–°–¢ OPENAI:');
  
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    console.log('‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }
  
  try {
    const openai = new OpenAI({ apiKey });
    
    console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI...');
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: '–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞–µ—Ç?' }],
      max_tokens: 5
    });
    
    const answer = response.choices[0].message.content;
    console.log('‚úÖ OpenAI —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–≤–µ—Ç:', answer);
    return true;
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ OpenAI:', error.message);
    if (error.response) {
      console.log('üìä –°—Ç–∞—Ç—É—Å:', error.response.status);
      console.log('üìÑ –î–∞–Ω–Ω—ã–µ:', error.response.data);
    }
    return false;
  }
}

async function testTelegram() {
  console.log('\nüì± –¢–ï–°–¢ TELEGRAM:');
  
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;
  
  if (!botToken) {
    console.log('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }
  
  if (!chatId) {
    console.log('‚ùå TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }
  
  try {
    const telegramBot = new TelegramBot();
    
    console.log('üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
    const isConnected = await telegramBot.testConnection();
    
    if (!isConnected) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram');
      return false;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ');
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    const testMessage = `üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Argentina Media Bot
‚è∞ –í—Ä–µ–º—è: ${new Date().toISOString()}
üîß –°—Ç–∞—Ç—É—Å: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!`;
    
    const success = await telegramBot.sendMessage(testMessage);
    
    if (success) {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
      return true;
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      return false;
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ Telegram:', error.message);
    return false;
  }
}

async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤...\n');
  
  const openaiResult = await testOpenAI();
  const telegramResult = await testTelegram();
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:');
  console.log('OpenAI:', openaiResult ? '‚úÖ' : '‚ùå');
  console.log('Telegram:', telegramResult ? '‚úÖ' : '‚ùå');
  
  if (!openaiResult || !telegramResult) {
    console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    if (!openaiResult) {
      console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OPENAI_API_KEY –≤ Railway Dashboard');
      console.log('- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ OpenAI');
    }
    if (!telegramResult) {
      console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ Railway Dashboard');
      console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_CHAT_ID –≤ Railway Dashboard');
      console.log('- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç/–∫–∞–Ω–∞–ª');
    }
  }
}

runTests().catch(console.error); 