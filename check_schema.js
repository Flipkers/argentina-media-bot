require('dotenv').config();

const { createClient } = require('@supabase/supabase-js');

console.log('üîç –ü–†–û–í–ï–†–Ø–ï–ú –°–•–ï–ú–£ –¢–ê–ë–õ–ò–¶–´ ARTICLES');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkSchema() {
  console.log('\nüìä –ü–†–û–í–ï–†–Ø–ï–ú –°–•–ï–ú–£:');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É —Å—Ç–∞—Ç—å—é, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –ø–æ–ª—è
    const { data: article, error } = await supabase
      .from('articles')
      .select('*')
      .limit(1);
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error.message);
      return;
    }
    
    if (article && article.length > 0) {
      const sampleArticle = article[0];
      console.log('üìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–õ–û–ù–ö–ò –í –¢–ê–ë–õ–ò–¶–ï ARTICLES:');
      
      Object.keys(sampleArticle).forEach(key => {
        const value = sampleArticle[key];
        const type = typeof value;
        const length = value ? value.length : 0;
        console.log(`  - ${key}: ${type} (${length} —Å–∏–º–≤–æ–ª–æ–≤)`);
      });
      
      console.log('\nüìÑ –ü–†–ò–ú–ï–† –°–¢–ê–¢–¨–ò:');
      console.log('ID:', sampleArticle.id);
      console.log('Title:', sampleArticle.title);
      console.log('Link:', sampleArticle.link);
      console.log('Content:', sampleArticle.content ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
      console.log('Mercury Content:', sampleArticle.mercury_content ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
      console.log('OpenAI Score:', sampleArticle.openai_score);
      console.log('OpenAI Category:', sampleArticle.openai_category);
      
    } else {
      console.log('‚ùå –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ');
    }
    
  } catch (error) {
    console.log('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

async function testUpdate() {
  console.log('\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú –û–ë–ù–û–í–õ–ï–ù–ò–ï:');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç–∞—Ç—å—é
    const { data: articles, error } = await supabase
      .from('articles')
      .select('*')
      .limit(1);
    
    if (error || !articles || articles.length === 0) {
      console.log('‚ùå –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    const article = articles[0];
    console.log(`üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ ID: ${article.id}`);
    
    // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
    const updateData = {
      openai_category: '—Ç–µ—Å—Ç',
      openai_score: 5,
      openai_should_post: true,
      openai_post_title: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫',
      openai_post_content: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
      openai_translation: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥'
    };
    
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateData);
    
    const { error: updateError } = await supabase
      .from('articles')
      .update(updateData)
      .eq('id', article.id);
    
    if (updateError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateError.message);
    } else {
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

async function runCheck() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ö–µ–º—ã...\n');
  
  await checkSchema();
  await testUpdate();
  
  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

runCheck().catch(console.error); 