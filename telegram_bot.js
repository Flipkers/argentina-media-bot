// Telegram Bot –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
const axios = require('axios');

class TelegramBot {
  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN;
    this.channelId = process.env.TELEGRAM_CHANNEL_ID;
    this.chatId = process.env.TELEGRAM_CHAT_ID;
    
    if (!this.botToken) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    if (!this.channelId && !this.chatId) {
      console.error('‚ùå TELEGRAM_CHANNEL_ID –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîß Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
    console.log('  - Bot Token:', this.botToken ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω');
    console.log('  - Channel ID:', this.channelId || '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω');
    console.log('  - Chat ID:', this.chatId || '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω');
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç
  async sendMessage(message, options = {}) {
    try {
      if (!this.botToken) {
        console.error('‚ùå Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return false;
      }

      const targetId = this.channelId || this.chatId;
      if (!targetId) {
        console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
        return false;
      }

      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤: ${targetId}`);
      console.log(`üìÑ –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.length} —Å–∏–º–≤–æ–ª–æ–≤`);

      const url = `https://api.telegram.org/bot${this.botToken}/sendMessage`;
      
      const payload = {
        chat_id: targetId,
        text: message,
        parse_mode: 'HTML',
        disable_web_page_preview: false,
        ...options
      };

      console.log('üì° URL:', url);
      console.log('üì¶ Payload chat_id:', payload.chat_id);

      const response = await axios.post(url, payload);
      
      if (response.data.ok) {
        console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram (ID: ${response.data.result.message_id})`);
        return true;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', response.data);
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error.message);
      if (error.response) {
        console.error('üìä –°—Ç–∞—Ç—É—Å:', error.response.status);
        console.error('üìÑ –î–∞–Ω–Ω—ã–µ:', error.response.data);
      }
      return false;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
  async sendPost(article) {
    try {
      if (!article.openai_should_post || !article.openai_post_title || !article.openai_post_content) {
        console.log(`‚ö†Ô∏è –°—Ç–∞—Ç—å—è "${article.title}" –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`);
        return false;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
      const message = this.formatPostMessage(article);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const success = await this.sendMessage(message);
      
      if (success) {
        console.log(`üì§ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: ${article.openai_post_title}`);
        return true;
      } else {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç: ${article.openai_post_title}`);
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:', error.message);
      return false;
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
  formatPostMessage(article) {
    const title = article.openai_post_title;
    const content = article.openai_post_content;
    const source = article.source_name || '–ò—Å—Ç–æ—á–Ω–∏–∫';
    const link = article.link;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è Telegram (–º–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤)
    const maxLength = 3500; // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Å—Å—ã–ª–∫–∏
    let truncatedContent = content.length > maxLength 
      ? content.substring(0, maxLength) + '...' 
      : content;

    // –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã –ø–æ —Å–º—ã—Å–ª—É
    const formattedContent = this.formatContentIntoParagraphs(truncatedContent);

    const message = `
<b>${title}</b>

${formattedContent}

üîó <a href="${link}">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ ${source}</a>
    `.trim();

    return message;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –∞–±–∑–∞—Ü—ã
  formatContentIntoParagraphs(content) {
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    let cleanContent = content.trim().replace(/\s+/g, ' ');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ç–æ—á–∫–∞–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const sentences = cleanContent.split(/[.!?]+/).filter(s => s.trim().length > 0);
    
    if (sentences.length <= 2) {
      // –ï—Å–ª–∏ –º–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      return cleanContent;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –∞–±–∑–∞—Ü—ã –ø–æ —Å–º—ã—Å–ª—É
    const paragraphs = [];
    let currentParagraph = [];
    
    for (let i = 0; i < sentences.length; i++) {
      const sentence = sentences[i].trim();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π –∞–±–∑–∞—Ü
      currentParagraph.push(sentence);
      
      // –†–µ—à–∞–µ–º, –∫–æ–≥–¥–∞ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∞–±–∑–∞—Ü
      const shouldStartNewParagraph = this.shouldStartNewParagraph(sentences, i);
      
      if (shouldStartNewParagraph && currentParagraph.length > 0) {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–±–∑–∞—Ü
        paragraphs.push(currentParagraph.join('. ') + '.');
        currentParagraph = [];
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–±–∑–∞—Ü, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (currentParagraph.length > 0) {
      paragraphs.push(currentParagraph.join('. ') + '.');
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞–±–∑–∞—Ü—ã —Å –¥–≤–æ–π–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
    return paragraphs.join('\n\n');
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∞–±–∑–∞—Ü
  shouldStartNewParagraph(sentences, currentIndex) {
    if (currentIndex === 0) return false; // –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –≤ –ø–µ—Ä–≤–æ–º –∞–±–∑–∞—Ü–µ
    
    const currentSentence = sentences[currentIndex].toLowerCase();
    const prevSentence = sentences[currentIndex - 1].toLowerCase();
    
    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –Ω–∞—á–∏–Ω–∞—é—Ç –Ω–æ–≤—ã–π –∞–±–∑–∞—Ü
    const paragraphStarters = [
      '–æ–¥–Ω–∞–∫–æ', '–Ω–æ', '–≤–ø—Ä–æ—á–µ–º', '–º–µ–∂–¥—É —Ç–µ–º', '—Ç–µ–º –≤—Ä–µ–º–µ–Ω–µ–º',
      '–∫—Ä–æ–º–µ —Ç–æ–≥–æ', '–±–æ–ª–µ–µ —Ç–æ–≥–æ', '—Ç–∞–∫–∂–µ', '—Ç–∞–∫–∂–µ —Å—Ç–æ–∏—Ç –æ—Ç–º–µ—Ç–∏—Ç—å',
      '–≤–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å', '—Å–ª–µ–¥—É–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å', '—Å—Ç–æ–∏—Ç –æ—Ç–º–µ—Ç–∏—Ç—å',
      '–ø–æ —Å–ª–æ–≤–∞–º', '—Å–æ–≥–ª–∞—Å–Ω–æ', '–∫–∞–∫ —Å–æ–æ–±—â–∞–µ—Ç—Å—è', '–∫–∞–∫ –æ—Ç–º–µ—á–∞–µ—Ç—Å—è',
      '–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ', '–≤ –∏—Ç–æ–≥–µ', '–≤ –∫–æ–Ω–µ—á–Ω–æ–º —Å—á–µ—Ç–µ',
      '–≤ —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º', '–≤ —Å–≤—è–∑–∏ —Å —á–µ–º', '–ø–æ—ç—Ç–æ–º—É',
      '—Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º', '–∏—Ç–∞–∫', '—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ'
    ];
    
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    for (const starter of paragraphStarters) {
      if (currentSentence.startsWith(starter)) {
        return true;
      }
    }
    
    // –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–±–∑–∞—Ü —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π (3+ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
    // –∏ —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ
    if (currentIndex >= 3 && currentSentence.length > 50) {
      return true;
    }
    
    return false;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  async sendStats(stats) {
    try {
      const message = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>

üì∞ –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: ${stats.totalArticles}
ü§ñ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ OpenAI: ${stats.analyzedArticles}
‚≠ê –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π: ${stats.interestingArticles}
üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: ${stats.publishedPosts}

üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
      `.trim();

      return await this.sendMessage(message);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
  async testConnection() {
    try {
      if (!this.botToken) {
        console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return false;
      }

      const url = `https://api.telegram.org/bot${this.botToken}/getMe`;
      const response = await axios.get(url);
      
      if (response.data.ok) {
        const botInfo = response.data.result;
        console.log(`‚úÖ Telegram Bot –ø–æ–¥–∫–ª—é—á–µ–Ω: @${botInfo.username} (${botInfo.first_name})`);
        return true;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram Bot:', response.data);
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:', error.message);
      return false;
    }
  }
}

module.exports = TelegramBot; 