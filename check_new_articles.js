const axios = require('axios');
require('dotenv').config();

const apiKey = process.env.NEWSDATA_API_KEY;

async function checkNewArticles() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏\n');
  
  const baseUrl = 'https://newsdata.io/api/1/latest';
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤
  console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã...');
  try {
    const response = await axios.get(baseUrl, {
      params: {
        apikey: apiKey,
        country: 'ar',
        size: 10
      }
    });
    
    const articles = response.data.results || [];
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π\n`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const now = new Date();
    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
    const threeHoursAgo = new Date(now.getTime() - 3 * 60 * 60 * 1000);
    const sixHoursAgo = new Date(now.getTime() - 6 * 60 * 60 * 1000);
    
    const lastHour = [];
    const last3Hours = [];
    const last6Hours = [];
    const older = [];
    
    articles.forEach(article => {
      const pubDate = new Date(article.pubDate);
      if (pubDate > oneHourAgo) {
        lastHour.push(article);
      } else if (pubDate > threeHoursAgo) {
        last3Hours.push(article);
      } else if (pubDate > sixHoursAgo) {
        last6Hours.push(article);
      } else {
        older.push(article);
      }
    });
    
    console.log('üìÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏:');
    console.log(`üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: ${lastHour.length} —Å—Ç–∞—Ç–µ–π`);
    console.log(`üïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞: ${last3Hours.length} —Å—Ç–∞—Ç–µ–π`);
    console.log(`üïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤: ${last6Hours.length} —Å—Ç–∞—Ç–µ–π`);
    console.log(`üïê –°—Ç–∞—Ä—à–µ 6 —á–∞—Å–æ–≤: ${older.length} —Å—Ç–∞—Ç–µ–π\n`);
    
    if (lastHour.length > 0) {
      console.log('üÜï –°—Ç–∞—Ç—å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:');
      lastHour.forEach((article, index) => {
        console.log(`${index + 1}. ${article.title}`);
        console.log(`   üìÖ ${article.pubDate}`);
        console.log(`   üÜî ${article.article_id}`);
        console.log(`   üì∞ ${article.source_name}\n`);
      });
    }
    
    if (last3Hours.length > 0 && lastHour.length === 0) {
      console.log('üÜï –°—Ç–∞—Ç—å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞:');
      last3Hours.slice(0, 3).forEach((article, index) => {
        console.log(`${index + 1}. ${article.title}`);
        console.log(`   üìÖ ${article.pubDate}`);
        console.log(`   üÜî ${article.article_id}`);
        console.log(`   üì∞ ${article.source_name}\n`);
      });
    }
    
    console.log('üí° –í—ã–≤–æ–¥:');
    if (lastHour.length > 0) {
      console.log('‚úÖ –ï—Å—Ç—å –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å!');
    } else if (last3Hours.length > 0) {
      console.log('‚ö†Ô∏è –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –∑–∞ —á–∞—Å –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞');
    } else {
      console.log('‚ùå –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ—Ç —É–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤');
      console.log('üìù –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –ø—É–±–ª–∏–∫—É—é—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
}

checkNewArticles(); 