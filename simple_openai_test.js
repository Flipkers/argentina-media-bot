require('dotenv').config();

const OpenAI = require('openai');

console.log('üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ OPENAI');

async function testOpenAI() {
  const apiKey = process.env.OPENAI_API_KEY;
  
  if (!apiKey) {
    console.log('‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  console.log('üîë API Key –Ω–∞–π–¥–µ–Ω:', apiKey.substring(0, 10) + '...');
  
  try {
    const openai = new OpenAI({ apiKey });
    
    console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ OpenAI...');
    
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: '–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞–µ—Ç?' }],
      max_tokens: 5
    });
    
    const answer = response.choices[0].message.content;
    console.log('‚úÖ OpenAI —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–≤–µ—Ç:', answer);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    console.log('\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—å–∏...');
    
    const testPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É —Å—Ç–∞—Ç—å—é –∏ –≤–µ—Ä–Ω–∏ JSON:
{
  "category": "–≤–∞–∂–Ω–∞—è/–Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è",
  "score": 1-10,
  "should_post": true/false,
  "post_title": "–∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞",
  "post_content": "–∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
  "translation": "–ø–µ—Ä–µ–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"
}

–°—Ç–∞—Ç—å—è: "Test article about technology"
–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: "This is a test article about new technology developments."
–°—Å—ã–ª–∫–∞: "https://example.com"`;

    const analysisResponse = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: testPrompt }],
      max_tokens: 500
    });
    
    const analysisResult = analysisResponse.choices[0].message.content;
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:', analysisResult.substring(0, 200));
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    try {
      const parsed = JSON.parse(analysisResult);
      console.log('‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è:', parsed.category);
      console.log('üìä –û—Ü–µ–Ω–∫–∞:', parsed.score);
    } catch (e) {
      console.log('‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', e.message);
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ OpenAI:', error.message);
    if (error.response) {
      console.log('üìä –°—Ç–∞—Ç—É—Å:', error.response.status);
      console.log('üìÑ –î–∞–Ω–Ω—ã–µ:', error.response.data);
    }
  }
}

testOpenAI().catch(console.error); 