#!/usr/bin/env node

require('dotenv').config();
require('./polyfills'); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–∏—Ñ–∏–ª–ª—ã

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
console.log('üîç –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã...');
require('./test');

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é CLI
console.log('\nüß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é CLI...');
require('./test_cli');

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
console.log('\nüîß –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–æ–≤...');
require('./test_services');

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç OpenAI –∞–Ω–∞–ª–∏–∑–∞
console.log('\nü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç OpenAI –∞–Ω–∞–ª–∏–∑–∞...');
require('./test_openai_analysis');

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç Telegram –ø–æ—Å—Ç–∏–Ω–≥–∞
console.log('\nüì± –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç Telegram –ø–æ—Å—Ç–∏–Ω–≥–∞...');
require('./test_telegram_posting');

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É Telegram
console.log('\nüîç –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É Telegram...');
require('./debug_telegram');

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ OpenAI –∞–Ω–∞–ª–∏–∑–∞
console.log('\nüîß –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ OpenAI –∞–Ω–∞–ª–∏–∑–∞...');
require('./fix_openai');

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç OpenAI
console.log('\nüß™ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç OpenAI...');
require('./simple_openai_test');

const express = require('express');
const cron = require('node-cron');
const { exec } = require('child_process');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json());
app.use(express.static('public'));

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
let lastRun = null;
let isRunning = false;
let runHistory = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
async function runFullCycle() {
  if (isRunning) {
    console.log('‚ö†Ô∏è –¶–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
    return;
  }

  isRunning = true;
  const startTime = new Date();
  
  console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≤ ${startTime.toISOString()}`);
  
  return new Promise((resolve, reject) => {
    exec('node cli.js --full_cycle --size=10', { 
      cwd: __dirname,
      maxBuffer: 1024 * 1024 * 10 // 10MB buffer
    }, (error, stdout, stderr) => {
      const endTime = new Date();
      const duration = endTime - startTime;
      
      const runResult = {
        id: Date.now(),
        startTime: startTime.toISOString(),
        endTime: endTime.toISOString(),
        duration: duration,
        success: !error,
        error: error ? error.message : null,
        stdout: stdout,
        stderr: stderr
      };
      
      runHistory.unshift(runResult);
      runHistory = runHistory.slice(0, 10); // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—É—Å–∫–æ–≤
      
      lastRun = runResult;
      isRunning = false;
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ:', error.message);
        reject(error);
      } else {
        console.log(`‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration}ms`);
        resolve(runResult);
      }
    });
  });
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á - –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
cron.schedule('*/5 * * * *', async () => {
  console.log('‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª...');
  try {
    await runFullCycle();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ:', error);
  }
});

// API endpoints

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π endpoint –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.get('/test', (req, res) => {
  res.json({
    status: 'ok',
    message: 'Argentina Media Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development',
    hasEnvVars: {
      newsdata: !!process.env.NEWSDATA_API_KEY,
      supabase: !!process.env.SUPABASE_URL,
      openai: !!process.env.OPENAI_API_KEY,
      telegram: !!process.env.TELEGRAM_BOT_TOKEN
    }
  });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>Argentina Media Bot</title>
      <meta charset="utf-8">
      <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .status { padding: 15px; border-radius: 5px; margin: 10px 0; }
        .status.running { background: #e3f2fd; border: 1px solid #2196f3; }
        .status.success { background: #e8f5e8; border: 1px solid #4caf50; }
        .status.error { background: #ffebee; border: 1px solid #f44336; }
        .button { background: #2196f3; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin: 5px; }
        .button:hover { background: #1976d2; }
        .button:disabled { background: #ccc; cursor: not-allowed; }
        .history { margin-top: 20px; }
        .history-item { padding: 10px; border: 1px solid #ddd; margin: 5px 0; border-radius: 5px; }
        .history-item.success { border-left: 4px solid #4caf50; }
        .history-item.error { border-left: 4px solid #f44336; }
        pre { background: #f5f5f5; padding: 10px; border-radius: 5px; overflow-x: auto; font-size: 12px; }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>üá¶üá∑ Argentina Media Bot</h1>
        <p>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –ê—Ä–≥–µ–Ω—Ç–∏–Ω—ã</p>
        
        <div id="status" class="status">
          <strong>–°—Ç–∞—Ç—É—Å:</strong> <span id="statusText">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
        </div>
        
        <div>
          <button class="button" onclick="runCycle()" id="runButton">üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª —Å–µ–π—á–∞—Å</button>
          <button class="button" onclick="getStatus()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å</button>
        </div>
        
        <div class="history">
          <h3>üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—É—Å–∫–æ–≤</h3>
          <div id="history"></div>
        </div>
      </div>
      
      <script>
        async function runCycle() {
          const button = document.getElementById('runButton');
          button.disabled = true;
          button.textContent = '‚è≥ –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...';
          
          try {
            const response = await fetch('/api/run', { method: 'POST' });
            const result = await response.json();
            
            if (result.success) {
              alert('‚úÖ –¶–∏–∫–ª –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            } else {
              alert('‚ùå –û—à–∏–±–∫–∞: ' + result.error);
            }
          } catch (error) {
            alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
          } finally {
            button.disabled = false;
            button.textContent = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª —Å–µ–π—á–∞—Å';
            getStatus();
          }
        }
        
        async function getStatus() {
          try {
            const response = await fetch('/api/status');
            const data = await response.json();
            
            const statusText = document.getElementById('statusText');
            const statusDiv = document.getElementById('status');
            
            if (data.isRunning) {
              statusText.textContent = '–ó–∞–ø—É—â–µ–Ω';
              statusDiv.className = 'status running';
            } else if (data.lastRun) {
              statusText.textContent = \`–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: \${new Date(data.lastRun.startTime).toLocaleString()}\`;
              statusDiv.className = data.lastRun.success ? 'status success' : 'status error';
            } else {
              statusText.textContent = '–ù–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è';
              statusDiv.className = 'status';
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            const historyDiv = document.getElementById('history');
            historyDiv.innerHTML = data.history.map(run => \`
              <div class="history-item \${run.success ? 'success' : 'error'}">
                <strong>\${new Date(run.startTime).toLocaleString()}</strong>
                <br>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: \${Math.round(run.duration / 1000)}—Å
                <br>–°—Ç–∞—Ç—É—Å: \${run.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}
                \${run.error ? \`<br>–û—à–∏–±–∫–∞: \${run.error}\` : ''}
              </div>
            \`).join('');
            
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
          }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        getStatus();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(getStatus, 30000);
      </script>
    </body>
    </html>
  `);
});

// API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–∞ –≤—Ä—É—á–Ω—É—é
app.post('/api/run', async (req, res) => {
  try {
    const result = await runFullCycle();
    res.json({ success: true, result });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
app.get('/api/status', (req, res) => {
  res.json({
    isRunning,
    lastRun,
    history: runHistory
  });
});

// Health check –¥–ª—è –æ–±–ª–∞—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìä –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:${PORT}`);
  console.log(`‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç`);
  console.log(`üîç Health check: http://localhost:${PORT}/health`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
}); 