require('dotenv').config();

const { createClient } = require('@supabase/supabase-js');

console.log('üß™ –¢–ï–°–¢ –ö–û–ù–¢–ï–ù–¢–ê –í –ë–ê–ó–ï');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testContent() {
  console.log('\nüìä –ü–†–û–í–ï–†–Ø–ï–ú –ö–û–ù–¢–ï–ù–¢ –í –ë–ê–ó–ï:');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const { data: articles, error } = await supabase
      .from('articles')
      .select('*')
      .limit(5);
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π:', error.message);
      return;
    }
    
    console.log(`üì∞ –ü–æ–ª—É—á–µ–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    
    for (let i = 0; i < articles.length; i++) {
      const article = articles[i];
      console.log(`\nüìù [${i + 1}/${articles.length}] –°—Ç–∞—Ç—å—è: "${article.title}"`);
      console.log('üîó –°—Å—ã–ª–∫–∞:', article.link);
      console.log('üìÑ content –ø–æ–ª–µ:', article.content ? `"${article.content.substring(0, 50)}..."` : 'NULL');
      console.log('üìÑ mercury_content –ø–æ–ª–µ:', article.mercury_content ? `"${article.mercury_content.substring(0, 50)}..."` : 'NULL');
      console.log('üìÑ –î–ª–∏–Ω–∞ content:', article.content ? article.content.length : 0);
      console.log('üìÑ –î–ª–∏–Ω–∞ mercury_content:', article.mercury_content ? article.mercury_content.length : 0);
      console.log('ü§ñ OpenAI score:', article.openai_score);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—å–∏ –±–µ–∑ OpenAI –∞–Ω–∞–ª–∏–∑–∞
    console.log('\nüìä –°–¢–ê–¢–¨–ò –ë–ï–ó OPENAI –ê–ù–ê–õ–ò–ó–ê:');
    const { data: unanalyzedArticles, error: unanalyzedError } = await supabase
      .from('articles')
      .select('*')
      .is('openai_score', null)
      .limit(3);
    
    if (unanalyzedError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π:', unanalyzedError.message);
      return;
    }
    
    console.log(`üì∞ –ù–∞–π–¥–µ–Ω–æ ${unanalyzedArticles.length} —Å—Ç–∞—Ç–µ–π –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞`);
    
    for (let i = 0; i < unanalyzedArticles.length; i++) {
      const article = unanalyzedArticles[i];
      console.log(`\nüìù [${i + 1}/${unanalyzedArticles.length}] –ù–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: "${article.title}"`);
      console.log('üìÑ mercury_content:', article.mercury_content ? `"${article.mercury_content.substring(0, 100)}..."` : 'NULL');
      console.log('üìÑ –î–ª–∏–Ω–∞ mercury_content:', article.mercury_content ? article.mercury_content.length : 0);
      
      if (article.mercury_content && article.mercury_content.length > 50) {
        console.log('‚úÖ –ï—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!');
      } else {
        console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      }
    }
    
  } catch (error) {
    console.log('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

testContent().catch(console.error); 