#!/usr/bin/env node
/* eslint-disable */

require('dotenv').config();
require('./polyfills'); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–∏—Ñ–∏–ª–ª—ã
const Mercury = require('./dist/mercury');
const axios = require('axios');
const { createClient } = require('@supabase/supabase-js');
const OpenAI = require('openai');
const { getOpenAIPrompt } = require('./openai_prompt');
const TelegramBot = require('./telegram_bot');
const argv = require('yargs-parser')(process.argv.slice(2));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Supabase');
  console.error('SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
  console.error('SUPABASE_SERVICE_KEY:', supabaseKey ? '‚úÖ' : '‚ùå');
}

const supabase = createClient(supabaseUrl, supabaseKey);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
async function testSupabaseConnection() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
    console.log('üìä URL:', supabaseUrl);
    console.log('üìä Key:', supabaseKey ? '‚úÖ' : '‚ùå');
    
    const { data, error } = await supabase
      .from('articles')
      .select('count')
      .limit(1);
    
    if (error) {
      console.log('üìã –¢–∞–±–ª–∏—Ü–∞ articles –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', error.message);
      return false;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ');
    return true;
  } catch (error) {
    console.log('üìã –¢–∞–±–ª–∏—Ü–∞ articles –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã articles
async function createArticlesTable() {
  try {
    console.log('üî® –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É articles...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ SQL
    const { error } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS articles (
          id BIGSERIAL PRIMARY KEY,
          article_id TEXT UNIQUE NOT NULL,
          title TEXT,
          link TEXT,
          keywords TEXT[],
          creator TEXT[],
          description TEXT,
          content TEXT,
          pub_date TIMESTAMP WITH TIME ZONE,
          pub_date_tz TEXT,
          image_url TEXT,
          video_url TEXT,
          source_id TEXT,
          source_name TEXT,
          source_priority INTEGER,
          source_url TEXT,
          source_icon TEXT,
          language TEXT,
          country TEXT[],
          category TEXT[],
          sentiment TEXT,
          sentiment_stats TEXT,
          ai_tag TEXT,
          ai_region TEXT,
          ai_org TEXT,
          ai_summary TEXT,
          ai_content TEXT,
          duplicate BOOLEAN DEFAULT FALSE,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
      `
    });
    
    if (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ RPC, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±...');
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      const { error: insertError } = await supabase
        .from('articles')
        .insert({
          article_id: 'test',
          title: 'Test Article'
        });
      
      if (insertError && insertError.code === '42P01') {
        console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ articles –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard');
        console.log('üìã SQL —Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª–µ create_articles_table.sql');
        return false;
      }
    }
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ articles —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', error.message);
    return false;
  }
}

const {
  _: [url],
  format,
  f,
  news,
  country,
  category,
  language,
  size,
  page,
  create_table,
  update_table,
  process_existing,
  test_domains,
  openai_analyze,
} = argv;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ Mercury Parser
async function processArticlesWithMercury(articles) {
  console.log('üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ Mercury Parser...');
  
  const processedArticles = [];
  
  for (let i = 0; i < articles.length; i++) {
    const article = articles[i];
    console.log(`üì∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å—é ${i + 1}/${articles.length}: ${article.title}`);
    
    try {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å—é —á–µ—Ä–µ–∑ Mercury Parser
      const mercuryResult = await Mercury.parse(article.link, {
        contentType: 'text'
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Mercury Parser –∫ —Å—Ç–∞—Ç—å–µ
      const processedArticle = {
        ...article,
        mercury_content: mercuryResult.content,
        mercury_text: mercuryResult.text,
        mercury_excerpt: mercuryResult.excerpt,
        mercury_lead_image_url: mercuryResult.lead_image_url,
        mercury_word_count: mercuryResult.word_count,
        mercury_direction: mercuryResult.direction,
        mercury_total_pages: mercuryResult.total_pages,
        mercury_rendered_pages: mercuryResult.rendered_pages,
        mercury_parsed_at: new Date().toISOString()
      };
      
      processedArticles.push(processedArticle);
      console.log(`‚úÖ –°—Ç–∞—Ç—å—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: ${mercuryResult.word_count} —Å–ª–æ–≤`);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—å–∏ ${article.title}:`, error.message);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –±–µ–∑ Mercury –¥–∞–Ω–Ω—ã—Ö
      const processedArticle = {
        ...article,
        mercury_content: null,
        mercury_text: null,
        mercury_excerpt: null,
        mercury_lead_image_url: null,
        mercury_word_count: null,
        mercury_direction: null,
        mercury_total_pages: null,
        mercury_rendered_pages: null,
        mercury_parsed_at: null
      };
      
      processedArticles.push(processedArticle);
    }
  }
  
  console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedArticles.length} —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ Mercury Parser`);
  return processedArticles;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ OpenAI
async function analyzeArticleWithOpenAI(article) {
  try {
    console.log(`ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é: ${article.title}`);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const content = `–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${article.title}\n\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${article.mercury_content || article.description || '–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const prompt = getOpenAIPrompt(content);

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 2000
    });

    const result = JSON.parse(response.choices[0].message.content);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫ —Å—Ç–∞—Ç—å–µ
    const analyzedArticle = {
      ...article,
      openai_translation: result.translation,
      openai_category: result.category,
      openai_score: result.score,
      openai_reason: result.reason,
      openai_post_title: result.post_title,
      openai_post_content: result.post_content,
      openai_should_post: result.should_post,
      openai_processed_at: new Date().toISOString()
    };
    
    console.log(`‚úÖ –°—Ç–∞—Ç—å—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: –æ—Ü–µ–Ω–∫–∞ ${result.score}/10, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${result.category}`);
    
    return analyzedArticle;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç–∞—Ç—å–∏ ${article.title}:`, error.message);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—å—é —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏ OpenAI –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return {
      ...article,
      openai_translation: null,
      openai_category: '–Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è',
      openai_score: 1,
      openai_reason: `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`,
      openai_post_title: null,
      openai_post_content: null,
      openai_should_post: false,
      openai_processed_at: new Date().toISOString()
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ OpenAI
async function processArticlesWithOpenAI(articles) {
  console.log('ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ OpenAI...');
  
  const processedArticles = [];
  
  for (let i = 0; i < articles.length; i++) {
    const article = articles[i];
    console.log(`üì∞ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é ${i + 1}/${articles.length}: ${article.title}`);
    
    try {
      const analyzedArticle = await analyzeArticleWithOpenAI(article);
      processedArticles.push(analyzedArticle);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—å–∏ ${article.title}:`, error.message);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é —Å –æ—à–∏–±–∫–æ–π
      const errorArticle = {
        ...article,
        openai_translation: null,
        openai_category: '–Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è',
        openai_score: 1,
        openai_reason: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message}`,
        openai_post_title: null,
        openai_post_content: null,
        openai_should_post: false,
        openai_processed_at: new Date().toISOString()
      };
      
      processedArticles.push(errorArticle);
    }
  }
  
  console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedArticles.length} —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ OpenAI`);
  return processedArticles;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π –≤ Supabase
async function saveArticlesToSupabase(articles) {
  try {
    const articlesToInsert = articles.map(article => ({
      article_id: article.article_id,
      title: article.title,
      link: article.link,
      keywords: article.keywords,
      creator: article.creator,
      description: article.description,
      content: article.content,
      pub_date: article.pubDate,
      pub_date_tz: article.pubDateTZ,
      image_url: article.image_url,
      video_url: article.video_url,
      source_id: article.source_id,
      source_name: article.source_name,
      source_priority: article.source_priority,
      source_url: article.source_url,
      source_icon: article.source_icon,
      language: article.language,
      country: article.country,
      category: article.category,
      sentiment: article.sentiment,
      sentiment_stats: article.sentiment_stats,
      ai_tag: article.ai_tag,
      ai_region: article.ai_region,
      ai_org: article.ai_org,
      ai_summary: article.ai_summary,
      ai_content: article.ai_content,
      duplicate: article.duplicate,
      // Mercury Parser –ø–æ–ª—è
      mercury_content: article.mercury_content,
      mercury_text: article.mercury_text,
      mercury_excerpt: article.mercury_excerpt,
      mercury_lead_image_url: article.mercury_lead_image_url,
      mercury_word_count: article.mercury_word_count,
      mercury_direction: article.mercury_direction,
      mercury_total_pages: article.mercury_total_pages,
      mercury_rendered_pages: article.mercury_rendered_pages,
      mercury_parsed_at: article.mercury_parsed_at,
      // OpenAI –ø–æ–ª—è
      openai_translation: article.openai_translation,
      openai_category: article.openai_category,
      openai_score: article.openai_score,
      openai_reason: article.openai_reason,
      openai_post_title: article.openai_post_title,
      openai_post_content: article.openai_post_content,
      openai_should_post: article.openai_should_post,
      openai_processed_at: article.openai_processed_at,
      created_at: new Date().toISOString()
    }));

    console.log('üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', articlesToInsert.length);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ URL –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π
    const newUrls = articlesToInsert.map(article => article.link).filter(url => url);
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç—å–∏ –ø–æ URL...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Å—Ç–∞—Ç—å–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ë–î
    const { data: existingArticles, error: checkError } = await supabase
      .from('articles')
      .select('link')
      .in('link', newUrls);
    
    if (checkError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∞—Ç–µ–π:', checkError);
      throw checkError;
    }
    
    const existingUrls = existingArticles.map(article => article.link);
    const newArticles = articlesToInsert.filter(article => !existingUrls.includes(article.link));
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${existingUrls.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∞—Ç–µ–π –∏–∑ ${newUrls.length} –Ω–æ–≤—ã—Ö`);
    console.log(`üìä –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ ${newArticles.length} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π`);
    
    if (newArticles.length === 0) {
      console.log('‚úÖ –í—Å–µ —Å—Ç–∞—Ç—å–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return [];
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏
    const { data, error } = await supabase
      .from('articles')
      .insert(newArticles);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Supabase:', error);
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(error, null, 2));
      throw error;
    }

    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${newArticles.length} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –≤ Supabase`);
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–µ–π:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OpenAI –∞–Ω–∞–ª–∏–∑–∞
async function updateOpenAIResults(articles) {
  try {
    console.log('ü§ñ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã OpenAI –∞–Ω–∞–ª–∏–∑–∞...');
    
    const articlesToUpdate = articles.filter(article => 
      article.openai_score && article.openai_category
    );
    
    if (articlesToUpdate.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç —Å—Ç–∞—Ç–µ–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ OpenAI –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return [];
    }
    
    console.log(`üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${articlesToUpdate.length} —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è OpenAI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
    
    let updatedCount = 0;
    
    for (const article of articlesToUpdate) {
      try {
        const { error } = await supabase
          .from('articles')
          .update({
            openai_translation: article.openai_translation,
            openai_category: article.openai_category,
            openai_score: article.openai_score,
            openai_reason: article.openai_reason,
            openai_post_title: article.openai_post_title,
            openai_post_content: article.openai_post_content,
            openai_should_post: article.openai_should_post,
            openai_processed_at: article.openai_processed_at
          })
          .eq('link', article.link);
        
        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏ ${article.title}:`, error);
        } else {
          updatedCount++;
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏ ${article.title}:`, error);
      }
    }
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —Å—Ç–∞—Ç–µ–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ OpenAI`);
    return articlesToUpdate;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OpenAI:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ Telegram
async function publishPostsToTelegram(count = 5) {
  try {
    console.log('üì§ –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç—ã –≤ Telegram...');
    
    const telegramBot = new TelegramBot();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const isConnected = await telegramBot.testConnection();
    if (!isConnected) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram Bot');
      return [];
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { data: articles, error } = await supabase
      .from('articles')
      .select('*')
      .eq('openai_should_post', true)
      .is('telegram_published_at', null) // –¢–æ–ª—å–∫–æ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ
      .order('openai_score', { ascending: false })
      .limit(count);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–µ–π:', error);
      return [];
    }
    
    if (!articles || articles.length === 0) {
      console.log('üìã –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
      return [];
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${articles.length} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`);
    
    let publishedCount = 0;
    const publishedArticles = [];
    
    for (const article of articles) {
      try {
        // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
        const success = await telegramBot.sendPost(article);
        
        if (success) {
          // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π
          const { error: updateError } = await supabase
            .from('articles')
            .update({ 
              telegram_published_at: new Date().toISOString() 
            })
            .eq('id', article.id);
          
          if (updateError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:`, updateError);
          } else {
            publishedCount++;
            publishedArticles.push(article);
            console.log(`‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: ${article.openai_post_title}`);
          }
          
          // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ "${article.title}":`, error.message);
      }
    }
    
    console.log(`üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ${publishedCount} –ø–æ—Å—Ç–æ–≤ –∏–∑ ${articles.length}`);
    return publishedArticles;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤:', error.message);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –≤ Telegram
async function publishSpecificArticlesToTelegram(articles) {
  try {
    console.log(`üì§ –ü—É–±–ª–∏–∫—É–µ–º ${articles.length} –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –≤ Telegram...`);
    
    const telegramBot = new TelegramBot();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const isConnected = await telegramBot.testConnection();
    if (!isConnected) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram Bot');
      return [];
    }
    
    if (!articles || articles.length === 0) {
      console.log('üìã –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
      return [];
    }
    
    let publishedCount = 0;
    const publishedArticles = [];
    
    for (const article of articles) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—å—è –µ—â–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞
        const { data: existingArticle, error: checkError } = await supabase
          .from('articles')
          .select('telegram_published_at')
          .eq('link', article.link)
          .single();
        
        if (checkError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞—Ç—å–∏:`, checkError);
          continue;
        }
        
        if (existingArticle && existingArticle.telegram_published_at) {
          console.log(`‚ö†Ô∏è –°—Ç–∞—Ç—å—è "${article.title}" —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }
        
        // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
        const success = await telegramBot.sendPost(article);
        
        if (success) {
          // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π
          const { error: updateError } = await supabase
            .from('articles')
            .update({ telegram_published_at: new Date().toISOString() })
            .eq('link', article.link);
          
          if (updateError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:`, updateError);
          } else {
            publishedCount++;
            publishedArticles.push(article);
            console.log(`‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: ${article.title} (–æ—Ü–µ–Ω–∫–∞: ${article.openai_score}/10)`);
          }
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ ${article.title}:`, error);
      }
    }
    
    console.log(`‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ${publishedCount} —Å—Ç–∞—Ç–µ–π –≤ Telegram`);
    return publishedArticles;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π:', error);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Telegram
async function sendStatsToTelegram() {
  try {
    console.log('üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Telegram...');
    
    const telegramBot = new TelegramBot();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const today = new Date().toISOString().split('T')[0];
    
    const { data: articles, error } = await supabase
      .from('articles')
      .select('*')
      .gte('created_at', today);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return false;
    }
    
    const stats = {
      totalArticles: articles.length,
      analyzedArticles: articles.filter(a => a.openai_processed_at).length,
      interestingArticles: articles.filter(a => a.openai_score >= 6).length,
      publishedPosts: articles.filter(a => a.telegram_published_at).length
    };
    
    const success = await telegramBot.sendStats(stats);
    
    if (success) {
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram');
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    }
    
    return success;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ newsdata.io API
async function getNewsData(params = {}) {
  const apiKey = process.env.NEWSDATA_API_KEY;
  if (!apiKey) {
    throw new Error('NEWSDATA_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }

  const baseUrl = 'https://newsdata.io/api/1/news';
  const priorityDomains = 'infobae.com,clarin.com,batimes.com.ar,lanacion.com.ar,pagina12.com.ar';
  
  let allResults = [];
  let totalResults = 0;
  let nextPage = null;

  try {
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    console.log('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤...');
    const priorityParams = {
      apikey: apiKey,
      country: 'ar',
      language: 'en,es',
      category: 'business,politics,lifestyle,technology,entertainment',
      q: 'milei OR politica OR futbol OR economia OR sociedad',
      domainurl: priorityDomains,
      size: Math.min(params.size || 10, 10), // –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç–∞—Ç–µ–π
      ...params
    };

    const priorityResponse = await axios.get(baseUrl, { params: priorityParams });
    
    if (priorityResponse.data.results && priorityResponse.data.results.length > 0) {
      allResults = [...allResults, ...priorityResponse.data.results];
      console.log(`üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã: ${priorityResponse.data.results.length} —Å—Ç–∞—Ç–µ–π`);
    }

    // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å: –≤—Å–µ –∞—Ä–≥–µ–Ω—Ç–∏–Ω—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–æ–º–µ–Ω–∞–º)
    console.log('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å–æ –≤—Å–µ—Ö –∞—Ä–≥–µ–Ω—Ç–∏–Ω—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...');
    const generalParams = {
      apikey: apiKey,
      country: 'ar',
      language: 'en,es',
      category: 'business,politics,lifestyle,technology,entertainment',
      q: 'deportes OR salud OR tecnologia OR cultura OR internacional',
      size: Math.min(params.size || 10, 10), // –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç–∞—Ç–µ–π
      ...params
    };

    // –£–±–∏—Ä–∞–µ–º domainurl –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    delete generalParams.domainurl;

    const generalResponse = await axios.get(baseUrl, { params: generalParams });
    
    if (generalResponse.data.results && generalResponse.data.results.length > 0) {
      allResults = [...allResults, ...generalResponse.data.results];
      console.log(`üìä –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: ${generalResponse.data.results.length} —Å—Ç–∞—Ç–µ–π`);
    }

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ URL
    const uniqueResults = allResults.filter((article, index, self) => 
      index === self.findIndex(a => a.link === article.link)
    );

    console.log(`üìä –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π: ${uniqueResults.length}`);
    console.log(`üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏: ${[...new Set(uniqueResults.map(a => a.source_name))].join(', ')}`);

    return {
      status: 'success',
      totalResults: uniqueResults.length,
      results: uniqueResults,
      nextPage: generalResponse.data.nextPage || priorityResponse.data.nextPage
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ newsdata.io API:', error.response?.data || error.message);
    if (error.response?.data) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(error.response.data, null, 2));
    }
    throw error;
  }
}

(async (urlToParse, contentType) => {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ argv
  const {
    news,
    full_cycle,
    size,
    page,
    country,
    category,
    language,
    create_table,
    update_table,
    test_domains,
    openai_analyze,
    test_telegram,
    publish_posts,
    send_stats
  } = argv;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
  if (create_table) {
    try {
      console.log('üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã articles...');
      const tableCreated = await createArticlesTable();
      if (tableCreated) {
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ articles —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É');
        console.log('üìã –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard, –∏—Å–ø–æ–ª—å–∑—É—è SQL –∏–∑ —Ñ–∞–π–ª–∞ create_articles_table.sql');
      }
      return;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', error.message);
      process.exit(1);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
  if (update_table) {
    try {
      console.log('üî® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã articles (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π Mercury Parser)...');
      console.log('üìã –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ñ–∞–π–ª–∞ create_articles_table.sql –≤ Supabase Dashboard');
      console.log('üìã –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: ALTER TABLE articles ADD COLUMN IF NOT EXISTS mercury_content TEXT;');
      return;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', error.message);
      process.exit(1);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤
  if (test_domains) {
    try {
      console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–æ–º–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ...');
      
      const domains = ['infobae.com', 'clarin.com', 'batimes.com.ar', 'lanacion.com.ar', 'pagina12.com.ar'];
      
      for (const domain of domains) {
        console.log(`\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–º–µ–Ω: ${domain}`);
        
        try {
          const apiKey = process.env.NEWSDATA_API_KEY;
          const baseUrl = 'https://newsdata.io/api/1/news';
          const queryParams = {
            apikey: apiKey,
            country: 'ar',
            language: 'en,es',
            category: 'business,politics,lifestyle,technology,entertainment',
            q: 'noticias OR actualidad OR argentina',
            domainurl: domain,
            size: 5
          };

          const response = await axios.get(baseUrl, { params: queryParams });
          
          if (response.data.results && response.data.results.length > 0) {
            console.log(`‚úÖ ${domain}: –Ω–∞–π–¥–µ–Ω–æ ${response.data.results.length} —Å—Ç–∞—Ç–µ–π`);
            console.log(`üì∞ –ü—Ä–∏–º–µ—Ä—ã: ${response.data.results.slice(0, 2).map(a => a.title).join(', ')}`);
          } else {
            console.log(`‚ö†Ô∏è ${domain}: —Å—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
          }
          
        } catch (error) {
          console.error(`‚ùå ${domain}: –æ—à–∏–±–∫–∞ - ${error.response?.data?.results?.message || error.message}`);
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 200));
      }
      
      return;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–º–µ–Ω–æ–≤:', error.message);
      process.exit(1);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ OpenAI
  if (openai_analyze) {
    try {
      console.log('ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ OpenAI...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
      const connected = await testSupabaseConnection();
      if (!connected) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase');
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const { data: articles, error } = await supabase
        .from('articles')
        .select('*')
        .is('openai_processed_at', null) // –¢–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
        .limit(openai_analyze === true ? 5 : parseInt(openai_analyze));
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–µ–π:', error);
        return;
      }
      
      if (!articles || articles.length === 0) {
        console.log('üìã –ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
        return;
      }
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ OpenAI
      const processedArticles = await processArticlesWithOpenAI(articles);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã OpenAI –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await updateOpenAIResults(processedArticles);
      
      // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const interestingArticles = processedArticles.filter(a => a.openai_should_post);
      const avgScore = processedArticles.reduce((sum, a) => sum + a.openai_score, 0) / processedArticles.length;
      
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:');
      console.log(`üì∞ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedArticles.length}`);
      console.log(`‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${avgScore.toFixed(1)}/10`);
      console.log(`‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π: ${interestingArticles.length}`);
      console.log(`‚ùå –ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π: ${processedArticles.length - interestingArticles.length}`);
      
      if (interestingArticles.length > 0) {
        console.log('\nüéØ –°–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏:');
        interestingArticles
          .sort((a, b) => b.openai_score - a.openai_score)
          .slice(0, 3)
          .forEach((article, index) => {
            console.log(`${index + 1}. ${article.title} (${article.openai_score}/10 - ${article.openai_category})`);
          });
      }
      
      return;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–µ—Ä–µ–∑ OpenAI:', error.message);
      process.exit(1);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram
  if (test_telegram) {
    try {
      console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
      const telegramBot = new TelegramBot();
      const success = await telegramBot.testConnection();
      
      if (success) {
        console.log('‚úÖ Telegram Bot –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        const testMessage = 'ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Argentina Media Bot\n\n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!';
        const messageSent = await telegramBot.sendMessage(testMessage);
        
        if (messageSent) {
          console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        } else {
          console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        }
      } else {
        console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π Telegram Bot');
      }
      return;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram:', error.message);
      process.exit(1);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
  if (publish_posts) {
    try {
      const count = publish_posts === true ? 5 : parseInt(publish_posts);
      console.log(`üì§ –ü—É–±–ª–∏–∫—É–µ–º ${count} –ø–æ—Å—Ç–æ–≤ –≤ Telegram...`);
      
      const publishedArticles = await publishPostsToTelegram(count);
      
      if (publishedArticles.length > 0) {
        console.log('\nüì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:');
        publishedArticles.forEach((article, index) => {
          console.log(`${index + 1}. ${article.openai_post_title} (${article.openai_score}/10)`);
        });
      }
      
      return;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤:', error.message);
      process.exit(1);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  if (send_stats) {
    try {
      console.log('üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Telegram...');
      const success = await sendStatsToTelegram();
      
      if (success) {
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
      }
      return;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
      process.exit(1);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (–Ω–æ–≤–æ—Å—Ç–∏ + –ø–∞—Ä—Å–∏–Ω–≥ + OpenAI)
  if (full_cycle) {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–∏–∫–ª...');
      
      const params = {};
      if (country) params.country = country;
      if (category) params.category = category;
      if (language) params.language = language;
      if (size) params.size = parseInt(size);
      if (page) params.page = page;
      
      // –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
      console.log('\nüì° –≠–¢–ê–ü 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ API...');
      const newsData = await getNewsData(params);
      
      if (!newsData.results || newsData.results.length === 0) {
        console.log('‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª');
        return;
      }
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${newsData.results.length} —Å—Ç–∞—Ç–µ–π`);
      
      // –≠—Ç–∞–ø 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Mercury Parser
      console.log('\nüîç –≠–¢–ê–ü 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Mercury Parser...');
      const processedArticles = await processArticlesWithMercury(newsData.results);
      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedArticles.length} —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ Mercury Parser`);
      
      // –≠—Ç–∞–ø 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase
      console.log('\nüíæ –≠–¢–ê–ü 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
      const isConnected = await testSupabaseConnection();
      if (!isConnected) {
        const tableCreated = await createArticlesTable();
        if (!tableCreated) {
          console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase');
        } else {
          await saveArticlesToSupabase(processedArticles);
        }
      } else {
        await saveArticlesToSupabase(processedArticles);
      }
      
      // –≠—Ç–∞–ø 4: –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI
      console.log('\nü§ñ –≠–¢–ê–ü 4: –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI...');
      const openaiCount = Math.min(processedArticles.length, 10); // –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç–∞—Ç–µ–π –¥–ª—è OpenAI
      console.log(`üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${openaiCount} —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ OpenAI...`);
      
      const analyzedArticles = await processArticlesWithOpenAI(processedArticles.slice(0, openaiCount));
      
      // –≠—Ç–∞–ø 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OpenAI
      console.log('\nüíæ –≠–¢–ê–ü 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OpenAI...');
      await updateOpenAIResults(analyzedArticles);
      
      // –≠—Ç–∞–ø 6: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
      console.log('\nüì§ –≠–¢–ê–ü 6: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram...');
      
      // –ü—É–±–ª–∏–∫—É–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ü–∏–∫–ª–∞
      const interestingArticlesFromCycle = analyzedArticles.filter(a => 
        a.openai_should_post && a.openai_score >= 6
      );
      
      let publishedArticles = [];
      
      if (interestingArticlesFromCycle.length > 0) {
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${interestingArticlesFromCycle.length} –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`);
        
        // –ü—É–±–ª–∏–∫—É–µ–º –í–°–ï –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
        publishedArticles = await publishSpecificArticlesToTelegram(interestingArticlesFromCycle);
        console.log(`‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ${publishedArticles.length} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –≤ Telegram`);
      } else {
        console.log('üìã –ù–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ');
      }
      
      // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      console.log('\nüéâ –ü–û–õ–ù–´–ô –¶–ò–ö–õ –ó–ê–í–ï–†–®–ï–ù!');
      console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      console.log(`   ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: ${newsData.results.length}`);
      console.log(`   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ Mercury Parser: ${processedArticles.length}`);
      console.log(`   ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ OpenAI: ${analyzedArticles.length}`);
      console.log(`   ‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π (–æ—Ü–µ–Ω–∫–∞ 6+): ${interestingArticlesFromCycle.length}`);
      console.log(`   ‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ Telegram: ${publishedArticles.length}`);
      console.log(`   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: ${[...new Set(newsData.results.map(a => a.source_name))].join(', ')}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
      const interestingArticles = analyzedArticles.filter(a => a.openai_score >= 6);
      if (interestingArticles.length > 0) {
        console.log(`\n‚≠ê –°–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ (–æ—Ü–µ–Ω–∫–∞ 6+):`);
        interestingArticles
          .sort((a, b) => b.openai_score - a.openai_score)
          .slice(0, 3)
          .forEach((article, index) => {
            console.log(`${index + 1}. ${article.title} (${article.openai_score}/10 - ${article.openai_category})`);
          });
      }
      
      return;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ:', error.message);
      process.exit(1);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
  if (news) {
    try {
      const params = {};
      if (country) params.country = country;
      if (category) params.category = category;
      if (language) params.language = language;
      if (size) params.size = parseInt(size);
      if (page) params.page = page;
      
      console.log('–ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏...');
      const newsData = await getNewsData(params);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å–∏ –≤ Supabase
      if (newsData.results && newsData.results.length > 0) {
        console.log(`üì∞ –ù–∞–π–¥–µ–Ω–æ ${newsData.results.length} —Å—Ç–∞—Ç–µ–π`);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ Mercury Parser
        const processedArticles = await processArticlesWithMercury(newsData.results);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
        const isConnected = await testSupabaseConnection();
        if (!isConnected) {
          const tableCreated = await createArticlesTable();
          if (!tableCreated) {
            console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase');
          } else {
            await saveArticlesToSupabase(processedArticles);
          }
        } else {
          await saveArticlesToSupabase(processedArticles);
        }
      } else {
        console.log('üì∞ –°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
      
      console.log(JSON.stringify(newsData, null, 2));
      return;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:', error.message);
      process.exit(1);
    }
  }

  if (!urlToParse) {
    console.log(
      '\n\
mercury-parser\n\n\
    The Mercury Parser extracts semantic content from any url\n\n\
Usage:\n\
\n\
    $ mercury-parser url-to-parse [--format=html|text|markdown]\n\
    $ mercury-parser --news [--size=10]\n\
    $ mercury-parser --full_cycle [--size=10]  üöÄ –ü–û–õ–ù–´–ô –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –¶–ò–ö–õ\n\
    $ mercury-parser --create_table\n\
    $ mercury-parser --update_table\n\
    $ mercury-parser --test_domains\n\
    $ mercury-parser --openai_analyze [N]\n\
    $ mercury-parser --test_telegram\n\
    $ mercury-parser --publish_posts [N]\n\
    $ mercury-parser --send_stats\n\
\n\
News API Parameters:\n\
    --news          –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ê—Ä–≥–µ–Ω—Ç–∏–Ω—ã\n\
    --full_cycle    üöÄ –ü–û–õ–ù–´–ô –¶–ò–ö–õ: –Ω–æ–≤–æ—Å—Ç–∏ + –ø–∞—Ä—Å–∏–Ω–≥ + OpenAI –∞–Ω–∞–ª–∏–∑\n\
    --size=N        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π (–º–∞–∫—Å–∏–º—É–º 10 –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞)\n\
    --page=TOKEN    –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ nextPage –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞)\n\
    --create_table  –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É articles –≤ Supabase\n\
    --update_table  –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É articles (–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è Mercury Parser)\n\
    --test_domains  –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–æ–º–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ\n\
    --openai_analyze [N]  –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ OpenAI (N - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)\n\
    --test_telegram        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram Bot\n\
    --publish_posts [N]    –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ Telegram (N - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)\n\
    --send_stats           –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Telegram\n\
\n\
–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–æ–º–µ–Ω–∞–º: infobae.com, clarin.com, batimes.com.ar, lanacion.com.ar, pagina12.com.ar\n\
–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: noticias, actualidad, argentina\n\
\n\
üöÄ –ü–û–õ–ù–´–ô –¶–ò–ö–õ –≤–∫–ª—é—á–∞–µ—Ç:\n\
    1. üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ API\n\
    2. üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Mercury Parser\n\
    3. üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n\
    4. ü§ñ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI\n\
    5. üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)\n\
    6. üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\
\n\
'
    );
    return;
  }
  try {
    const contentTypeMap = {
      html: 'html',
      markdown: 'markdown',
      md: 'markdown',
      text: 'text',
      txt: 'text',
    };
    const result = await Mercury.parse(urlToParse, {
      contentType: contentTypeMap[contentType],
    });
    console.log(JSON.stringify(result, null, 2));
  } catch (e) {
    if (e.message === 'ETIMEDOUT' && false) {
      console.error(
        '\nMercury Parser encountered a timeout trying to load that resource.'
      );
    } else {
      console.error(
        '\nMercury Parser encountered a problem trying to parse that resource.\n'
      );
      console.error(e);
    }
    const reportBug =
      'If you believe this was an error, please file an issue at:\n\n    https://github.com/postlight/mercury-parser/issues/new';
    console.error(`\n${reportBug}\n`);
    process.exit(1);
  }
})(url, format || f);
